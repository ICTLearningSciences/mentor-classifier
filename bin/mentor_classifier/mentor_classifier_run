#!/usr/bin/env bash

BIN="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

getopts_long() {
    : ${1:?Missing required parameter -- long optspec}
    : ${2:?Missing required parameter -- variable name}

    local optspec_short="${1%% *}-:"
    local optspec_long="${1#* }"
    local optvar="${2}"

    shift 2

    if [[ "${#}" == 0 ]]; then
        local args=()
        while [[ ${#BASH_ARGV[@]} -gt ${#args[@]} ]]; do
            local index=$(( ${#BASH_ARGV[@]} - ${#args[@]} - 1 ))
            args[${#args[@]}]="${BASH_ARGV[${index}]}"
        done
        set -- "${args[@]}"
    fi

    builtin getopts "${optspec_short}" "${optvar}" "${@}" || return 1
    [[ "${!optvar}" == '-' ]] || return 0

    printf -v "${optvar}" "${OPTARG%%=*}"

    if [[ "${optspec_long}" =~ (^|[[:space:]])${!optvar}:([[:space:]]|$) ]]; then
        OPTARG="${OPTARG#${!optvar}}"
        OPTARG="${OPTARG#=}"

        # Missing argument
        if [[ -z "${OPTARG}" ]]; then
            OPTARG="${!OPTIND}" && OPTIND=$(( OPTIND + 1 ))
            [[ -z "${OPTARG}" ]] || return 0

            if [[ "${optspec_short:0:1}" == ':' ]]; then
                OPTARG="${!optvar}" && printf -v "${optvar}" ':'
            else
                [[ "${OPTERR}" == 0 ]] || \
                    echo "${0}: option requires an argument -- ${!optvar}" >&2
                unset OPTARG && printf -v "${optvar}" '?'
            fi
        fi
    elif [[ "${optspec_long}" =~ (^|[[:space:]])${!optvar}([[:space:]]|$) ]]; then
        unset OPTARG
    else
        # Invalid option
        if [[ "${optspec_short:0:1}" == ':' ]]; then
            OPTARG="${!optvar}"
        else
            [[ "${OPTERR}" == 0 ]] || echo "${0}: illegal option -- ${!optvar}" >&2
            unset OPTARG
        fi
        printf -v ${optvar} '?'
    fi
}

ADDITIONAL_ARGS=""
ARCH=""
DOCKER_CMD=""
DOCKER_CONTAINER=mentor-classifier
DOCKER_IMAGE=""
CHECKPOINT=""
CHECKPOINT_ROOT=${CHECKPOINT_ROOT:-$(pwd)/checkpoint}
ENTRYPOINT=""
MENTOR=""
MENTOR_ROOT=${MENTOR_ROOT:-$(pwd)/mentors}
TEST_MENTOR=""

while getopts_long "c: arch: checkpoint: checkpoint-root: container-name: cmd: docker-env: entrypoint: image: mentor: mentor-root: test-mentor:" OPTKEY; do
  echo "NEXT ARG ${OPTKEY}=${OPTARG}"
  case ${OPTKEY} in
    'arch' )
      ARCH="${OPTARG}"
      ;;
    'checkpoint' )
      CHECKPOINT="${OPTARG}"
      ;;
    'checkpoint-root' )
      CHECKPOINT_ROOT="${OPTARG}"
      ;;
    'c' | 'cmd' )
      DOCKER_CMD="${OPTARG}"
      ;;
    'container-name' )
      DOCKER_CONTAINER="${OPTARG}"
      ;;
    'docker-env' )
      ADDITIONAL_ARGS="${ADDITIONAL_ARGS} -e ${OPTARG}"
      ;;
    'entrypoint' )
      ENTRYPOINT="${OPTARG}"
      ;;
    'image' )
      DOCKER_IMAGE="${OPTARG}"
      ;;
    'mentor' )
      MENTOR="${OPTARG}"
      ;;
    'mentor-root' )
      MENTOR_ROOT="${OPTARG}"
      ;;
    'test-mentor' )
      TEST_MENTOR="${OPTARG}"
      ;;
  esac
done
shift $((OPTIND -1))

echo "THIS IS THE COMMAND

docker run \
        -it \
        --rm \
        --name ${DOCKER_CONTAINER} \
        -v ${CHECKPOINT_ROOT}:/app/checkpoint \
        -v ${MENTOR_ROOT}:/app/mentors \
        -v ${BIN}:/app/bin \
        -e ARCH=${ARCH} \
        -e CHECKPOINT=${CHECKPOINT} \
        -e MENTOR_ROOT=${MENTOR_ROOT} \
        -e MENTOR=${MENTOR} \
        -e TEST_MENTOR=${TEST_MENTOR} \
        ${ADDITIONAL_ARGS} \
        --workdir /app \
        --entrypoint ${ENTRYPOINT} \
    ${DOCKER_IMAGE} ${DOCKER_CMD}


"
docker run \
        -it \
        --rm \
        --name ${DOCKER_CONTAINER} \
        -v ${CHECKPOINT_ROOT}:/app/checkpoint \
        -v ${MENTOR_ROOT}:/app/mentors \
        -v ${BIN}:/app/bin \
        -e ARCH=${ARCH} \
        -e CHECKPOINT=${CHECKPOINT} \
        -e MENTOR_ROOT=${MENTOR_ROOT} \
        -e MENTOR=${MENTOR} \
        -e TEST_MENTOR=${TEST_MENTOR} \
        ${ADDITIONAL_ARGS} \
        --workdir /app \
        --entrypoint ${ENTRYPOINT} \
    ${DOCKER_IMAGE} ${DOCKER_CMD}